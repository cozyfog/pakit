#ifndef LEXER_H
#define LEXER_H

#include "typedef.h"

enum TokenType {
  TOKEN_UNDEFINED,
  TOKEN_WHITESPACE,

  TOKEN_IDENTIFIER,

  TOKEN_INTENGER,
	TOKEN_FLOAT,
	TOKEN_STRING,
	
	TOKEN_PAREN_OPEN,
	TOKEN_PAREN_CLOSE,
	
	TOKEN_CURLY_OPEN,
	TOKEN_CURLY_CLOSE,
	
	TOKEN_COLON,
	TOKEN_SEMICOLON,
	TOKEN_DOT,
	TOKEN_COMMA,
	
	TOKEN_EQUALS,
	TOKEN_SMALLER,
	TOKEN_BIGGER,
	TOKEN_NOT,
	TOKEN_AMPERSAND,
	TOKEN_VERTICAL,
	
	TOKEN_EQUIVALENT,
	TOKEN_SMALLER_EQUALS,
	TOKEN_BIGGER_EQUALS,
	TOKEN_NOT_EQUALS,
	TOKEN_AND,
	TOKEN_OR,
	
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_STAR,
	TOKEN_SLASH,
	TOKEN_PERCENT,
	
	TOKEN_PLUS_EQUALS,
	TOKEN_MINUS_EQUALS,
	TOKEN_STAR_EQUALS,
	TOKEN_SLASH_EQUALS,
	
	TOKEN_INCREMENT,
	TOKEN_DECREMENT,
	TOKEN_EXPONENTIATION,
	TOKEN_FLOOR_DIVISION,
	
	TOKEN_RETURN,
	TOKEN_IF,
	TOKEN_ELSE,
	TOKEN_FOR,
	TOKEN_WHILE,
	TOKEN_SWITCH,
	TOKEN_CASE,
	TOKEN_BREAK,
	TOKEN_DEFAULT,
	TOKEN_CONTINUE,
	TOKEN_NULL,
	TOKEN_TRUE,
	TOKEN_FALSE,
	TOKEN_ENUM,
	TOKEN_STRUCT
};

struct Token {
	string data;
	TokenType type;
};

vector<Token> generateTokens(string source);

#endif // LEXER_H
